{
    "contents" : "---\ntitle: \"Kaggle-titanic\"\nauthor: \"D\"\ndate: \"2017年5月24日\"\noutput: html_document\n---\nKaggleのTitanic演習\n\n###使用したライブラリ\n-caret (機械学習の使用)<br>\n-dplyr (データの形成)\n-data.table  (大規模データの高速処理)\n-ggplot2 (描画ツール)\n-kernlab (SVMの使用)\n-makedummies (ダミー変数の作成)\n-ranger  （ランダムフォレストの使用)\n-stringr (文字列の処理)\n\n```{r　include=FALSE}\nlibrary(caret)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(devtools)\nlibrary(ggplot2)\nlibrary(kernlab)\nlibrary(ranger)\nlibrary(stringr)\nlibrary(makedummies)\n\n```\n  \n###データの読み込み\n・Python pandas ではデータ読み込みの際に空白の箇所はnullとする.  \n・Rでは, 空白のレコードをNAとして判断しない.  \n・今回は, 乗客の客室を表すCabinの行の空白をNAとして判断する必要がある.  \n```{r}\ndf_train<-read.csv(\"train.csv\", stringsAsFactors = F, na.strings = (c(\"NA\", \"\")))\ndf_test<-read.csv(\"test.csv\", stringsAsFactors = F, na.strings = (c(\"NA\", \"\")))\n```\n  \n実際の欠損値（NA）の数を確認する.  \n```{r}\nna_count_train<-sapply(df_train, function(y) sum(is.na(y)))\nna_count_test<-sapply(df_test, function(y) sum(is.na(y)))\nna_count_train\nna_count_test\n```\n  \nこれで, Pythonのデータとも一致する. \nこの結果からもわかるように, Cabinは欠損値が多いので取り除くこととする.\n\n```{r}\n#remove Cabin\ndf_train_mod<-df_train%>%\n  dplyr::select(-PassengerId,-Ticket, -Cabin)\n\ndf_test_mod<-df_test%>%\n  dplyr::select(-PassengerId,-Ticket, -Cabin)\n```\nまた, 他の列に関しても欠損値を補完する.\n今回は年齢は平均値で, 補完した.\n```{r}\n#remove Age`s NA\ndf_train_mod$Age<-ifelse(is.na(df_train_mod$Age), mean(df_train_mod$Age,na.rm=TRUE), df_train_mod$Age)\ndf_test_mod$Age<-ifelse(is.na(df_test_mod$Age), mean(df_test_mod$Age,na.rm=TRUE), df_test_mod$Age)\n```\n\n```{r}\n#insert Embarked`s NA\ndf_train_mod$Embarked<-as.factor(df_train_mod$Embarked)\ndf_test_mod$Embarked<-as.factor(df_test_mod$Embarked)\n\ndf_train_mod$Embarked<-ifelse(is.na(df_train_mod$Embarked), 3, df_train_mod$Embarked)\ndf_test_mod$Embarked<-ifelse(is.na(df_test_mod$Embarked), 3, df_test_mod$Embarked)\n\ndf_train_mod$Embarked<-as.factor(df_train_mod$Embarked)\ndf_test_mod$Embarked<-as.factor(df_test_mod$Embarked)\n```\n\n```{r}\n#test of  Fare`s NA\ndf_test_mod$Fare<-ifelse(is.na(df_test_mod$Fare), mean(df_test_mod$Fare,na.rm=TRUE), df_test_mod$Fare)\n```\n\n名前の分割\n```{r}\n#separate Name\n#(train)\nname_sep_train<-str_split_fixed(df_train$Name, \"[,.]\", 3)\nname_sep_train<-as.data.frame(name_sep_train)\ncolnames(name_sep_train)<-c(\"Surname\",\"Honorific\",\"Givenname\")\n\ndf_train$Name<-name_sep_train$Honorific\n#(test)\nname_sep_test<-str_split_fixed(df_test$Name, \"[,.]\", 3)\nname_sep_test<-as.data.frame(name_sep_test)\ncolnames(name_sep_test)<-c(\"Surname\",\"Honorific\",\"Givenname\")\n\ndf_test$Name<-name_sep_test$Honorific\n```\n\n\n次にdummy変数を導入する\n```{r}\n#make dummy variables\ndf_train_sub<-makedummies(df_train,basal_level=TRUE, as.is=c(\"Name\", \"Ticket\", \"Cabin\"))\ndf_train_sub$Age<-as.integer(df_train_sub$Age)\n\ndf_test_sub<-makedummies(df_test,basal_level=TRUE, as.is=c(\"Name\", \"Ticket\", \"Cabin\"))\ndf_test_sub$Age<-as.integer(df_test_sub$Age)\n```\nモデルの作成  (SVM)\n```{r}\n#make model\nmodel<-ranger(\n  Survived~.,\n  data = df_train_mod,\n  write.forest = TRUE\n)\n```\n予測データの作成\n```{r}\n#predict\nresult<-predict(model, data = df_test_mod)\n#Relative error\nrelative_err <- mean(abs(result$predictions - answer) / answer)  \nprint(relative_err)\nresult\nlim <- c(0, max(result$predictions, answer))\n```\n描画\n```{r}\ndata.frame(Predict = result$predictions, Answer = answer) %>%\n  ggplot(aes(x = Predict, y = Answer)) +\n  geom_point() +\n  geom_abline(\n    intercept = 0, slope = 1,\n    colour = \"red\", lwd = 1.5\n  ) +\n  xlab(\"予測価格\") + ylab(\"実価格\") +\n  scale_x_continuous(label = comma, limits = lim) +\n  scale_y_continuous(label = comma, limits = lim) +\n  theme_bw(base_family = \"Osaka\") +\n  coord_fixed()\n```\nモデルのフィッティング\n```{r}\nfit<-ksvm(\n  as.factor(Survived)~.,\n  data = df_train_mod\n)\npred <- predict(fit, df_test_mod)\n```\nデータの書き出し\n```{r}\nx<-data.frame(PassengerId=df_test$PassengerId, Survived=pred)\n\nwrite.csv(x,\"x.csv\", quote=FALSE, row.names=FALSE)\n```\n\n",
    "created" : 1495589041045.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1760203413",
    "id" : "9E10D7D6",
    "lastKnownWriteTime" : 1496108419,
    "path" : "~/Documents/kaggle/Untitled.Rmd",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}